#!/usr/bin/env python
import urllib2
from urllib import quote
import json
from math import radians, sin, cos, sqrt, asin
import sys

import termweather.config as aw


DEBUG = False

APIKEY = aw.apikey
APIURL = "http://api.wunderground.com/api/" + APIKEY
icons = dict(clear=aw.clear, cloudy=aw.cloudy, partlycloudy=aw.partlycloudy, mostlycloudy=aw.partlycloudy,
             rain=aw.rainy, tstorms=aw.storm, snow=aw.snow)


def haversine(lat1, lon1, lat2, lon2):  # http://rosettacode.org/wiki/Haversine_formula#Python
    r = 6372.8  # Earth radius in kilometers
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sin(dlat/2)**2 + cos(lat1)*cos(lat2)*sin(dlon/2)**2
    c = 2*asin(sqrt(a))
    return r * c


def loadjson(url):
    req = urllib2.Request(url)
    opener = urllib2.build_opener()
    f = opener.open(req)
    data = json.loads(f.read())
    return data


def geoip():
    """
    Simple geolocation based on IP address
    """
    response = loadjson("http://ip-api.com/json")
    if response["status"] == "success":
        return response


def conditions(locurl):
    """
    gets the current weather. some of wunderground's responses are finnicky about the /q/ part of the URL.
    """
    if locurl.startswith("/q/"):
        cond = loadjson(APIURL + "/conditions" + locurl)
    else:
        cond = loadjson(APIURL + "/conditions/q/" + locurl)
    try:
        return cond['current_observation']
    except:
        raise ValueError


def geolookup(loc):
    """

    Tries to figure out what city the user meant. This partly uses WUnderground's API, and does some of it locally.
    First, we see if the API has a disambiguated reply to our input. If not, we take its suggestions for possible
    responses and determine what the user likely meant, by weighting the population of each option compared to
    the distance of each option to the user. If that doesn't work, we resort to comparing most matching elements
    in the user's location and in each option.

    """
    loc = loc.lower()
    url = APIURL + "/geolookup/q/" + quote(loc) + '.json'
    response = loadjson(url)
    if 'results' in response['response'].keys():  # Time to disambiguate!
        options = response['response']['results']
        locality = geoip()
        disambiguated = []
        strval = lambda x: {str(y) for y in x.values()}
        lc = strval(locality)
        from termweather.data import citydataset
        bigcities = json.loads(citydataset)
        for option in options:
            op = strval(option)
            if loc in bigcities.keys():
                weighted = 0
                best = []
                for entry in bigcities[loc]:
                    distance = haversine(entry['Longitude'], entry['Latitude'], locality['lat'], locality['lon'])
                    population = entry['Population']
                    if (population/distance) > weighted:
                        weighted = (population/distance)
                        best = entry
                return geolookup(' '.join([loc, best['Country']]))
            elif len(op & lc) > len(disambiguated):  # checks for raw similarity
                disambiguated = option
                return geolookup(disambiguated['zmw'])
    else:
        r = loadjson(url)

        return r['location']['l'] + '.json'

def forecast(locurl):
    """
    Returns a list of a few days of weather.
    """
    fc = loadjson(APIURL + "/forecast" + locurl)
    return fc['forecast']['simpleforecast']['forecastday']


def parseresponse(r):
    """
    Takes the disambiguated response and finds the information we actually want.
    """
    temperature = list(str(r['temp_f']).split('.')[0])
    asciitemp = []
    for x in range(6):
        line = []
        for y in range(len(temperature)):
            row = aw.numbers[int(temperature[y])][x]
            line.append(row)
        asciitemp.append(''.join(line))
    parsed = dict(temp=tuple(asciitemp),
                  icon=tuple(icons[r['icon']]),
                  time=(r['local_time_rfc822'],),
                  wind=("Wind: " + r['wind_string'],),
                  humidity=("Humidity: " + r['relative_humidity'],),
                  name=(r['display_location']['full'],))
    return parsed


def rowbuild(rowdict):
    """
    Generates a dictionary of row data and coordinates. This is, in effect, half of a sprite system.
    """
    splitlocs = {}
    for obj in rowdict:
        xpos = rowdict[obj][0]
        ypos = rowdict[obj][1]
        if isinstance(type(obj), unicode):
            splitlocs[(xpos, ypos)] = obj
        else:
            for i, line in enumerate(obj):
                splitlocs[(xpos, ypos+i)] = line
    return splitlocs


def gridfill(rowdict):
    """
    Merges together the queued rows from rowbuild into one big 2D list.
    """
    offset = max(line[0] for line in rowdict)
    width = 70
    length = max([y[1] for y in rowdict.keys()]) + 1
    grid = [[" " for x in range(width)] for y in range(length)]
    for y in range(length):
        for x in range(width):
            if (x, y) in rowdict.keys():
                for index, item in enumerate(rowdict[(x, y)]):
                    try:
                        grid[y][x+index] = item
                    except IndexError:
                        pass

    return [''.join(x) for x in grid]


def args():
    """
    Parses out the arguments. The syntax is 'weather time location'.
    A few examples:
    > weather now new york

    > weather tomorrow london
    """
    arguments = sys.argv[1:]
    for t in ["now", "tomorrow", "week", "later"]:
        if  not len(arguments):
            time = "now"
            geo = geoip()
            location = ' '.join([geo['city'], geo['region']])
            return time, location
        elif arguments[0] == t:
            time = arguments[0]
            location = ' '.join(arguments[1:])
            return time, location
        else:
            time = "now"
            location = ' '.join(arguments)
            return time, location


if __name__ == "__main__":
    time, location = args()
    if time == "now":  # TODO: move this stuff to its own time parsing function
        disp = parseresponse(conditions(geolookup(location)))
    elif time == "tomorrow":
        geo = geolookup(location)
        print geo
        disp = parseresponse(forecast(geo)[0])
    else:
        disp = forecast(geolookup(location))
    offsets = {disp['icon']: aw.pos['icon'],
               disp['temp']: aw.pos['temp'],
               disp['name']: aw.pos['name'],
               disp['time']: aw.pos['time'],
               disp['wind']: aw.pos['wind']}
    for line in gridfill(rowbuild(offsets)):
            print line
    # TODO: add in the argparse stuff
